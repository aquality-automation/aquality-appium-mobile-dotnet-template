trigger:
- master

pool:
  vmImage: 'macOS-latest'

variables:
    buildConfiguration: 'Release'

jobs:
- job: sonar
  displayName: Analyse code with SonarQube

  steps:
  - task: SonarCloudPrepare@1
    displayName: 'Prepare SonarCloud analysis'
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'aqualityautomation'
      projectKey: 'aquality-automation_aquality-appium-mobile-dotnet-template'
      projectName: 'aquality-appium-mobile-dotnet-template'
      projectVersion: '$(Build.BuildNumber)'
      extraProperties: |
        sonar.coverage.exclusions=**/**
  
  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    env: 
      MSBUILDSINGLELOADCONTEXT: 1  # https://github.com/SpecFlowOSS/SpecFlow/issues/1912
    inputs:
      command: 'build'
      projects: Aquality.Appium.Mobile.Template/Aquality.Appium.Mobile.Template.sln
      arguments: -c $(buildConfiguration)

  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud code analysis'
    continueOnError: true

  - task: SonarCloudPublish@1
    displayName: 'Publish SonarCloud quality gate results'

- job: tests
  displayName: Run tests
  strategy:
    maxParallel: 1
    matrix:
      ANDROID:
        platformName: android

  variables:
    ANDROID_EMU_NAME: test
    ANDROID_EMU_ABI: x86_64
    ANDROID_EMU_TARGET: android-28
    ANDROID_EMU_TAG: google_apis

  steps:
  - task: CmdLine@2
    displayName: 'Configuring Environment with Appium'
    inputs:
      script: |        
        echo "Configuring Environment"
        ls /Library/Java/JavaVirtualMachines/
        ls $ANDROID_HOME/build-tools/

        export PATH=$PATH:$JAVA_HOME/bin
        echo export "ANDROID_HOME=\$ANDROID_HOME" >> ~/.bash_profile
        export PATH=$PATH:$ANDROID_HOME

        echo "ANDROID_HOME: ${ANDROID_HOME}"
        echo "JAVA_HOME: ${JAVA_HOME}"
        echo "PATH: ${PATH}"

        #echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;$(ANDROID_EMU_TARGET);$(ANDROID_EMU_TAG);$(ANDROID_EMU_ABI)'
        echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n "$(ANDROID_EMU_NAME)" -k 'system-images;$(ANDROID_EMU_TARGET);$(ANDROID_EMU_TAG);$(ANDROID_EMU_ABI)' --force
        echo $ANDROID_HOME/emulator/emulator -list-avds

        echo "Starting emulator"
        nohup $ANDROID_HOME/emulator/emulator -avd "$(ANDROID_EMU_NAME)" -no-snapshot > /dev/null 2>&1 &
        $ANDROID_HOME/platform-tools/adb wait-for-device
        while [[ $? -ne 0 ]]; do sleep 1; $ANDROID_HOME/platform-tools/adb shell pm list packages; done;
        $ANDROID_HOME/platform-tools/adb devices
        echo "Emulator started"
        
        echo "Installing Appium"
        echo "node version: ${node --version}"
        echo "npm version: ${npm -version}"
        npm list --depth 0
        npm install -g appium@v1.17.0
        # --chromedriver-skip-install
        ln -fs /usr/local/lib/node_modules/appium/build/lib/main.js /usr/local/bin/appium
        chmod +x /usr/local/bin/appium
        export PATH=$PATH:/usr/local/bin/appium

        echo "Installing and Running Appium doctor"
        npm install -g request@2.34.0
        npm install -g appium-doctor@1.15.1
        ln -fs /usr/local/lib/node_modules/appium-doctor/appium-doctor.js /usr/local/bin/appium-doctor
        chmod +x /usr/local/bin/appium-doctor
        export PATH=$PATH:/usr/local/bin/appium-doctor
        npm list --depth 0
        appium --version
        appium-doctor

        #echo "Test xcrun"
        #xcrun instruments -s
        #xcrun instruments -w "iPhone 11 (13.4.1)" - wait for simulator started
        #sudo xcode-select -s /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
        #xcrun simctl list

  - task: CmdLine@2
    displayName: 'Prepare and start iOS Simulator'
    inputs:
      script: |
        echo "Xcode"
        #sudo xcode-select -s /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
        #xcrun simctl list
    condition: and(succeeded(), eq(variables['platformName'], 'ios'))

  - task: CmdLine@2
    displayName: 'Start Appium server'
    inputs:
      script: |
        appium -a 127.0.0.1 -p 4723 --allow-insecure chromedriver_autodownload &
        echo "Appium server started"
    condition: succeeded()

  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    env: 
      isRemote: true
      MSBUILDSINGLELOADCONTEXT: 1  # https://github.com/SpecFlowOSS/SpecFlow/issues/1912
    inputs:
      command: 'test'
      projects: '**/Aquality.Appium.Mobile.Template.SpecFlow.csproj'
      arguments: -c $(buildConfiguration)
      publishTestResults: true

  - task: CopyFiles@2
    displayName: 'Copy failure screenshots and test logs'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
          **/*SpecFlow*/Screenshots/*.png
          **/*SpecFlow*/Log/*.log
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish copied artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    condition: succeededOrFailed()